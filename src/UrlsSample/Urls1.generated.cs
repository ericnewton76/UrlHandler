
using System.Reflection;
using UrlHandler.Core;
using ConfigurationManager = System.Configuration.ConfigurationManager;

namespace UrlsSample
{
	/// <summary>
	/// AUTOGENERATED
	/// </summary>
	public static partial class Urls
	{
		static Urls()
		{
			
		}

		/// <summary>
		/// Retrieves value of AppSettings[Urls:ThisEnvironment]
		/// </summary>
		public static string ThisEnvironment { get { return ConfigurationManager.AppSettings["Urls:ThisEnvironment"]; } }

		/// <summary>
		/// Looks for Urls specifications within the given string.
		/// </summary>
		/// <param name="value"></param>
		/// <returns></returns>
		public static bool HasUrlsLink(string value)
		{
			if(string.IsNullOrEmpty(value) == true)
			{
				return false;
			}

			return S_UrlsRegex.IsMatch(value);
		}

		/// <summary>
		/// Looks for Urls specifications within the given string.  Typically used on configuration or settings or resource strings that need url handling in them too.
		/// </summary>
		/// <param name="value"></param>
		/// <returns></returns>
		public static string FixUrlsLink(string value)
		{
			var regexMatches = S_UrlsRegex.Matches(value);

			foreach(System.Text.RegularExpressions.Match m in regexMatches)
			{
				PropertyInfo prop = typeof(Urls).GetProperty(m.Groups[1].Value, BindingFlags.IgnoreCase | BindingFlags.Static | BindingFlags.Public);

				if(prop != null)
				{
					UrlHandlerBase urlhandlerbase = (UrlHandlerBase)prop.GetGetMethod().Invoke(null, new object[] { });

					value = value.Replace(m.Groups[0].Value, "");

					return urlhandlerbase.FullyQualified(value);
				}
			}

			return value;
		}

		private static System.Text.RegularExpressions.Regex S_UrlsRegex = new System.Text.RegularExpressions.Regex(@"\{Urls.([A-Z]+)\}", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
	}
}